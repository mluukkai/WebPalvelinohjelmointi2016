c
rated.each { |style| puts style+" "+rating_of_style(style).to_s }
rated.eaxh { |style| puts style+" "+rating_of_style(style) }
rated.sort_by { |style| -rating_of_style(style) }
rated
c
rated
c
best
expect(user.favorite_beer).to eq(best)
c
user.favorite_beer
best
c
user.ratings.order(score: :desc)
user.ratings.order(score: :desc).limit
user.favorite_beer
user.ratings.order(score: :desc).limit(1).first.beer
user.ratings.count
user.favorite_beer
create_beer_with_rating(user, "lager", 25)
user
user.ratings.map {|r|r.beer.name}
create_beer_with_rating(user, "lager", 25)
user.ratings.map {|r|r.beer.name}
user.ratings
user.favorite_beer
c
rated_styles.sort_by { |style| -rating_of_style(style) }.first
rated_styles
c
rated_styles.sort_by { |style| -rating_of_style(style) }.first
rated_styles
c
ratings.map{|r|r.beer.style}.uniq
c
ratings.map{|r|r.beer.style}.uniq
ratings.map{|r|r.beer.name}
ratings
c
style_average_rating
c
style_average_rating
c
style_average_rating
style_average_rating.sort_by { |style, rating| -rating }
style_average_rating.sort_by { |style, rating| -rating }.first.key
rated_styles
rated_styles.sort_by { |style, rating| -rating }
rated_styles.sort_by { |style, rating| -rating }.first
rated_styles.sort_by { |style, rating| -rating }.first.
style_average_rating
rated_styles
c
ratings.map(&:score).inject(&:+)
ratings
ratings.inject(0) { | sum, r | sum+r.score }
ratings.inject(0){ | sum, r | sum+r.score }
rated_styles.each { |style| style_average_rating[style] = rating_of_style(style) }
rated_styles
c
continue
reset_session
c
reset_session
c
reset_session
c
current_user.in? club.members 
club
c
session[:user_id] = nil
q
c
ENV['rack.session']
ENV['rack_session']
ENV
env
session
c
params
